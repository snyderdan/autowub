--- src/Song.java	2013-11-09 03:55:55.000000000 -0500
+++ src/autowub/Song.java	2013-11-09 04:07:31.000000000 -0500
@@ -1,5 +1,9 @@
+package autowub;
+
 import javax.sound.midi.*;
 
+import autowub.NoteTrack;
+
 import java.util.Random;
 
 public class Song {
@@ -7,25 +11,51 @@
 	Verse verse = new Verse(16,4);
 	Bridge bridge = new Bridge();
 	Ending ending = new Ending();
-	static String[] keys = new String[]{"c","c#","d","d#","e","f","f#","g","g#","a","a#","b"};
+	public static String[] keys = new String[]{"c","c#","d","d#","e","f","f#","g","g#","a","a#","b"};
 	static String[] natKeys = new String[]{"c","d","e","f","g","a","b"};
-	static String[] sharpNum = new String[]{"c","g","d","a","e","b","f#","c#"};
-	static String[] flatNum = new String[]{"c","f","a#","d#","g#"};
-	static String[]	sharpOrder = new String[]{"f#","c#","g#","d#","a#","e#","b#"};
-	static String[]	flatOrder = new String[]{"a#","d#","g#","d#"};
+	static String[] sharpOrder = new String[]{"c","g","d","a","e","b","f#","c#"};
+	static String[] flatOrder = new String[]{"f","a#","d#","g#"};
 	String key;
 	int keyIndex;
 	String[][] chords = new String[7][3];
-//	String I[] = new String[3];
-//	String ii[] = new String[3];
-//	String iii[] = new String[3];
-//	String IV[] = new String[3];
-//	String V[] = new String[3];
-//	String vi[] = new String[3];
-//	String vii[] = new String[3];
+	String I[] = new String[3];
+	String ii[] = new String[3];
+	String iii[] = new String[3];
+	String IV[] = new String[3];
+	String V[] = new String[3];
+	String vi[] = new String[3];
+	String vii[] = new String[3];
+	
+	NoteTrack[] tracks = new NoteTrack[4];
+	public int bpm;
+	int beatNote;
+	
+	Song(NoteTrack[] tracks, int bpm, int beatNote){
+		this.tracks = tracks;
+		this.bpm = bpm;
+		this.beatNote = beatNote;
+	}
+	
+	Sequence getSequence() {
+		Sequence s = null;
+		try {
+			s = new Sequence(Sequence.PPQ, 4);
+			Track t = s.createTrack();
+			for (int i = 0; i < tracks.length; i++) {
+				tracks[i].fillMIDITrack(t, i);
+			}
+		} catch (InvalidMidiDataException e) {
+			// TODO Auto-generated catch block
+			e.printStackTrace();
+		}
+		return s;
+	}
+	
 	
 	public static void main(String[] args){
 		Song wub = new Song();
+//		int[] notes;
+//		int note = 72;
 //		try{
 //			Synthesizer synth = MidiSystem.getSynthesizer();
 //			synth.open();
@@ -42,7 +72,7 @@
 	
 	public Song(){
 		pickKey();
-		System.out.println("Key: " + key);
+		System.out.println(key);
 		int natIndex = 0;
 		//System.out.println(keys[keyIndex].substring(0, 1));
 		for(int i = 0; i<natKeys.length; i++){
@@ -57,6 +87,7 @@
 			}else{
 				chords[j][0] = natKeys[natIndex+j-natKeys.length];
 			}
+			//chords[j][0] = natKeys[natIndex+j];
 			if(natIndex+2+j<natKeys.length){
 				chords[j][1] = natKeys[natIndex+2+j];
 			}else if(natIndex+2+j<natKeys.length*2){
@@ -71,47 +102,23 @@
 			}else{
 				chords[j][2] = natKeys[natIndex+4+j-(natKeys.length*2)];
 			}
-		}
-		int accCount = -1;
-		for(int a = 0; a<sharpNum.length; a++){
-			if(key.equals(sharpNum[a])){
-				accCount = a;
-				for(int b = 0; b<accCount; b++){
-					for(int c = 0; c<chords.length; c++){
-						for(int d = 0; d<chords[c].length; d++){
-							if(chords[c][d].equals(sharpOrder[b].substring(0, 1))){
-								chords[c][d] = sharpOrder[b];
-							}
-						}
-					}
-				}
-				break;
-			}
-		}
-		if(accCount<0){
-			for(int e=0; e<flatNum.length; e++){
-				if(key.equals(flatNum[e])){
-					accCount = e;
-					for(int f = 0; f<accCount; f++){
-						for(int g = 0; g<chords.length; g++){
-							for(int h = 0; h<chords[g].length; h++){
-								if(chords[g][h].equals(flatOrder[f].substring(0, 1))){
-									chords[g][h] = flatOrder[f];
-								}
-							}
-						}
-					}
-					break;
-				}
-			}
-		}
-		for(int j=0; j<chords.length; j++){
 			for(int k=0; k<chords[j].length;k++){
 				System.out.print(chords[j][k]);
 			}
 			System.out.print("\n");
 		}
-
+//		for(int i=0; i<chords.length; i++){
+//			if(keyIndex+i<keys.length){
+//				chords[i][0] = keys[keyIndex+i];
+//			}else{
+//				
+//			}
+//			chords[i][1] = keys[keyIndex+4+i];
+//			chords[i][2] = keys[keyIndex+7+i];
+////			for(int j=0; j<chords[i].length; j++){
+////				chords[i][j] =  
+////			}
+//		}
 	}
 	
 	public void pickKey(){
@@ -121,7 +128,6 @@
 	}
 	
 	public void play(){
-		verse.create(key, keyIndex);
 		verse.play();
 		chorus.play();
 		verse.play();
